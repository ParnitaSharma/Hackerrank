import java.io.*;
	import java.math.*;
	import java.security.*;
	import java.text.*;
	import java.util.*;
	import java.util.concurrent.*;
	import java.util.function.*;
	import java.util.regex.*;
	import java.util.stream.*;
	import static java.util.stream.Collectors.joining;
	import static java.util.stream.Collectors.toList;
public class FequencyQueries {
	

	public static class Solution {

	    // Complete the freqQuery function below.
	    static List<Integer> freqQuery(List<List<Integer>> queries) {
	    ArrayList<Integer> res = new ArrayList<Integer>();
	    HashMap<Integer,Integer> hm = new HashMap<Integer,Integer>();
	    for(int i=0;i<queries.size();i++) {
	    	ArrayList<Integer> ls= (ArrayList<Integer>) queries.get(i);
	    	if(ls.get(0)==1) {
	    		if(hm.containsKey(ls.get(1))) {
	    			int num = hm.get(ls.get(1)) +1;
	    			hm.put(ls.get(1),num);
	    		}
	    		else {
	    			hm.put(ls.get(1),1);
	    		}
	    	}
	    	if(ls.get(0)==2) {
	    		if(hm.containsKey(ls.get(1))) {
	    			int num = hm.get(ls.get(1)) -1;
	    			hm.put(ls.get(1),num);
	    	}
	    }
	    	ArrayList<Integer> l = new ArrayList<Integer> (hm.values());
	    	if(ls.contains(1)) {
	    		res.add(1);
	    	}
	    		res.add(0);
	    	}
return res;
	    }

	    public static void main(String[] args) throws IOException {
	        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
	        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

	        int q = Integer.parseInt(bufferedReader.readLine().trim());

	        List<List<Integer>> queries = new ArrayList<>();

	        IntStream.range(0, q).forEach(i -> {
	            try {
	                queries.add(
	                    Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
	                        .map(Integer::parseInt)
	                        .collect(toList())
	                );
	            } catch (IOException ex) {
	                throw new RuntimeException(ex);
	            }
	        });

	        List<Integer> ans = freqQuery(queries);

	        bufferedWriter.write(
	            ans.stream()
	                .map(Object::toString)
	                .collect(joining("\n"))
	            + "\n"
	        );

	        bufferedReader.close();
	        bufferedWriter.close();
	    }
	}

}
